name: Deploy to Synology Container Manager

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Validar trigger
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            [[ "${{ github.event.issue.title }}" == deploy\ * ]] || exit 1
          else
            [[ "${{ github.event.comment.body }}" == deploy\ * ]] || exit 1
          fi

      - name: Extraer rama a desplegar
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            BRANCH=$(echo "${{ github.event.issue.title }}" | awk '{print $2}')
          else
            BRANCH=$(echo "${{ github.event.comment.body }}" | awk '{print $2}')
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout rama indicada
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch.outputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image to Docker Hub
        run: |
          docker compose build
          docker tag codefm:latest ${{ secrets.DOCKERHUB_USER }}/codefm:latest
          docker push ${{ secrets.DOCKERHUB_USER }}/codefm:latest

      - name: Deploy on Synology via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          script: |
            if ! [ -x /usr/local/bin/docker ]; then
              echo "‚ùå ERROR: Docker no encontrado en /usr/local/bin/docker"
              exit 1
            fi

            /usr/local/bin/docker pull ${{ secrets.DOCKERHUB_USER }}/codefm:latest
            /usr/local/bin/docker stop codefm || true
            /usr/local/bin/docker rm codefm || true
            /usr/local/bin/docker run -d --name codefm -p 80:80 ${{ secrets.DOCKERHUB_USER }}/codefm:latest
