name: Deploy to Synology Container Manager

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Validate trigger
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            [[ "${{ github.event.issue.title }}" == deploy* ]] || exit 1
          else
            [[ "${{ github.event.comment.body }}" == deploy* ]] || exit 1
          fi

      - name: Get PR branch if triggered by issue_comment
        id: pr_branch
        if: github.event_name == 'issue_comment'
        run: |
          PR_URL="${{ github.event.issue.pull_request.url }}"
          if [[ -n "$PR_URL" ]]; then
            BRANCH=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $PR_URL | jq -r .head.ref)
            echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          fi

      - name: Extract ref to deploy (branch or tag)
        id: ref
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            CMD="${{ github.event.issue.title }}"
            ARGS=($CMD)
            if [[ ${#ARGS[@]} -ne 2 ]]; then
              echo "En una issue debes usar: deploy nombre-rama"
              exit 1
            fi
            if [[ "${ARGS[0]}" != "deploy" ]]; then
              echo "Comando no soportado"
              exit 1
            fi
            REF="${ARGS[1]}"
            PROFILE="default"
            TYPE="branch"
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_URL="${{ github.event.issue.pull_request.url }}"
            CMD="${{ github.event.comment.body }}"
            ARGS=($CMD)
            if [[ ${#ARGS[@]} -ne 1 || "${ARGS[0]}" != "deploy" ]]; then
              echo "En un PR solo puedes usar: deploy"
              exit 1
            fi
            if [[ -n "$PR_URL" ]]; then
              # Es un comentario en un PR
              if [[ -n "${{ steps.pr_branch.outputs.branch }}" ]]; then
                REF="${{ steps.pr_branch.outputs.branch }}"
              elif [[ -n "${{ github.head_ref }}" ]]; then
                REF="${{ github.head_ref }}"
              else
                echo "No se pudo determinar la rama del PR"
                exit 1
              fi
              PROFILE="pre"
              TYPE="branch"
            else
              # Es un comentario en una issue
              REF="${{ github.event.issue.title }}"
              PROFILE="default"
              TYPE="branch"
            fi
          else
            echo "Trigger no soportado"
            exit 1
          fi

          echo "ref=$REF" >> $GITHUB_OUTPUT
          echo "profile=$PROFILE" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT

      - name: Checkout indicated ref (branch or tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.ref.outputs.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image to Docker Hub
        run: |
          if [[ "${{ steps.ref.outputs.profile }}" == "pre" ]]; then
            docker compose -f docker-compose-pre.yml build
            docker push ${{ secrets.DOCKERHUB_USER }}/codefm-pre:latest
          else
            docker compose build
            docker push ${{ secrets.DOCKERHUB_USER }}/codefm:latest
          fi
        env:
          INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN }}

      - name: Create .env file
        run: echo "INFISICAL_TOKEN=${{ secrets.INFISICAL_TOKEN }}" > .env

      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          source: ${{ steps.ref.outputs.profile == 'pre' && 'docker-compose-pre.yml' || 'docker-compose.yml' }}
          target: "~/codefm"

      - name: Copy .env
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          source: ".env"
          target: "~/codefm"

      - name: Create logs folder on Synology
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          script: mkdir -p ~/codefm/logs

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          port: 22
          script: |
            cd ~/codefm
            if [ -f docker-compose-pre.yml ]; then
              echo "Desplegando con perfil PRE"
              echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker-compose -f docker-compose-pre.yml pull
              echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker-compose -f docker-compose-pre.yml up -d --remove-orphans
              echo "Variables de entorno:"
              cat .env
              echo "Logs de arranque del contenedor:"
              sudo docker logs $(sudo docker ps -q --filter "ancestor=${{ secrets.DOCKERHUB_USER }}/codefm-pre:latest") --tail 50 || true
            else
              echo "Desplegando con perfil DEFAULT"
              echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker-compose pull
              echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker-compose up -d --remove-orphans
              echo "Variables de entorno:"
              cat .env
              echo "Logs de arranque del contenedor:"
              sudo docker logs $(sudo docker ps -q --filter "ancestor=${{ secrets.DOCKERHUB_USER }}/codefm:latest") --tail 50 || true
            fi

      - name: Clean up unused images and containers on Synology
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          port: 22
          script: |
            if [ "${{ steps.ref.outputs.profile }}" = "pre" ]; then
              # Elimina contenedores e imágenes antiguas de codefm-pre
              docker ps -a --filter "ancestor=${{ secrets.DOCKERHUB_USER }}/codefm-pre:latest" -q | xargs -r docker rm -f
              docker images "${{ secrets.DOCKERHUB_USER }}/codefm-pre" --format "{{.Repository}}:{{.Tag}}" | grep -v ":latest" | xargs -r docker rmi -f
            else
              # Elimina contenedores e imágenes antiguas de codefm (default)
              docker ps -a --filter "ancestor=${{ secrets.DOCKERHUB_USER }}/codefm:latest" -q | xargs -r docker rm -f
              docker images "${{ secrets.DOCKERHUB_USER }}/codefm" --format "{{.Repository}}:{{.Tag}}" | grep -v ":latest" | xargs -r docker rmi -f
            fi