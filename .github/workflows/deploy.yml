name: Deploy Blue-Green to Synology

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Validar trigger
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            [[ "${{ github.event.issue.title }}" == deploy\ * ]] || exit 1
          else
            [[ "${{ github.event.comment.body }}" == deploy\ * ]] || exit 1
          fi

      - name: Extraer rama a desplegar
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            BRANCH=$(echo "${{ github.event.issue.title }}" | awk '{print $2}')
          else
            BRANCH=$(echo "${{ github.event.comment.body }}" | awk '{print $2}')
          fi
          if [[ -z "$BRANCH" || "$BRANCH" == "" ]]; then
            BRANCH="${{ github.head_ref || github.ref_name }}"
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout rama indicada
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch.outputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push blue image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USER }}/codefm:blue .
          docker push ${{ secrets.DOCKERHUB_USER }}/codefm:blue

      - name: Build and push green image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USER }}/codefm:green .
          docker push ${{ secrets.DOCKERHUB_USER }}/codefm:green

      - name: Crear carpeta logs en Synology
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          script: mkdir -p ~/codefm/logs

      - name: Blue-Green Deploy en Synology
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          script: |
            cd ~/codefm
            ACTIVE=$(echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker ps --format '{{.Names}}' | grep codefm-blue && echo blue || echo green)
            if [ "$ACTIVE" = "blue" ]; then
              OLD=codefm-blue
              NEW=codefm-green
              NEW_IMAGE=${{ secrets.DOCKERHUB_USER }}/codefm:green
            else
              OLD=codefm-green
              NEW=codefm-blue
              NEW_IMAGE=${{ secrets.DOCKERHUB_USER }}/codefm:blue
            fi

            # Arrancar el nuevo en puerto alternativo y conectar a 3 redes
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker pull $NEW_IMAGE
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker run -d --name $NEW -p 8082:8080 -v ~/codefm/logs:/app/logs -e profile=prod --network logging $NEW_IMAGE
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker network connect infisical_external $NEW
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker network connect keycloak $NEW

            # Healthcheck
            for i in {1..10}; do
              sleep 5
              if echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S curl -sSf http://localhost:8082/actuator/health > /dev/null; then
                break
              fi
              if [ $i -eq 10 ]; then
                echo "Healthcheck fallido"
                echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker rm -f $NEW
                exit 1
              fi
            done

            # Parar y eliminar el antiguo
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker stop $OLD || true
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker rm $OLD || true

            # Levantar el nuevo en el puerto público y conectar a 3 redes
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker stop $NEW || true
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker rm $NEW || true
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker run -d --name $NEW -p 8081:8080 -v ~/codefm/logs:/app/logs -e profile=prod --network logging $NEW_IMAGE
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker network connect infisical_external $NEW
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker network connect keycloak $NEW

      - name: Limpiar imágenes no usadas en Synology
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          script: |
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker image prune -f