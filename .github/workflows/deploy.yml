name: Deploy to Synology Container Manager

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Validate trigger
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            [[ "${{ github.event.issue.title }}" == deploy* ]] || exit 1
          else
            [[ "${{ github.event.comment.body }}" == deploy* ]] || exit 1
          fi

      - name: Extract ref to deploy (branch or tag)
        id: ref
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            CMD="${{ github.event.issue.title }}"
          else
            CMD="${{ github.event.comment.body }}"
          fi

          # Divide el comando en palabras
          ARGS=($CMD)

          REF=""
          TYPE="branch"

          if [[ ${#ARGS[@]} -eq 1 ]]; then
            # Solo "deploy"
            if [[ -n "${{ github.head_ref }}" ]]; then
              REF="${{ github.head_ref }}"
            else
              echo "No branch specified and not in PR context, exiting."
              exit 1
            fi
          elif [[ ${#ARGS[@]} -eq 3 && "${ARGS[1]}" == "tag" ]]; then
            TYPE="tag"
            REF="${ARGS[2]}"
          elif [[ ${#ARGS[@]} -eq 2 ]]; then
            REF="${ARGS[1]}"
          else
            echo "Invalid deploy command format"
            exit 1
          fi

          echo "ref=$REF" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT

      - name: Checkout indicated ref (branch or tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.ref.outputs.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image to Docker Hub
        run: |
          docker compose build
          docker push ${{ secrets.DOCKERHUB_USER }}/codefm:latest
        env:
          INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN }}

      - name: Copy docker-compose.yml to Synology
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          source: "docker-compose.yml"
          target: "~/codefm"

      - name: Create logs folder on Synology
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          script: mkdir -p ~/codefm/logs

      - name: Deploy on Synology via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          port: 22
          script: |
            cd ~/codefm
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker-compose pull
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker-compose up -d --remove-orphans          

      - name: Clean up unused images on Synology
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USER }}
          password: ${{ secrets.SYNOLOGY_PASS }}
          port: 22
          script: |
            echo "${{ secrets.SYNOLOGY_PASS }}" | sudo -S /usr/local/bin/docker image prune -f
