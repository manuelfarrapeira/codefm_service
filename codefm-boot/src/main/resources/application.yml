management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    metrics:
      enabled: true
    health:
      show-details: always

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://codefm.synology.me:8480/realms/codefm
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
  application:
    name: codefm
  config:
    import:
      - "optional:consul:"
  cloud:
    consul:
      host: http://192.168.18.10
      port: 8500
      token: ${TOKEN_CONSUL}
      discovery:
        enabled: true
        instanceId: ${spring.application.name}:${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
      config:
        enabled: true
        format: YAML
        prefixes: config
        defaultContext: application
        profileSeparator: ':'
  data:
    rest:
      detection-strategy: ANNOTATED #esto es para evitar la generación de endpoints relacionados con los JPA
  datasource: #usamos librería p6spy para loguear las sql formateadas - spy.properties
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:p6spy:mariadb://192.168.18.10:3306/codefm
    username: codefm
    password: ${MARIADB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        style_table_aliases: none
        use_legacy_limit_handler: true
  jackson:
    serialization:
      indent-output: true

keycloak:
  client-id: codefm

consul:
  parametro: valorPorDefecto